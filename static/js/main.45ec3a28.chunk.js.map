{"version":3,"sources":["json-to-simple-graphql-schema/to-schema.js","json-to-simple-graphql-schema/remove-duplicate-types.js","json-to-simple-graphql-schema/stringify-schema.js","json-to-simple-graphql-schema/index.js","App.js","serviceWorker.js","index.js"],"names":["toSchema","input","result","processedItemsCache","stack","obj","path","_loop","_stack$pop","pop","Object","keys","forEach","key","currentValue","_","isArray","isObject","value","some","o","push","pathPrefix","concat","newPath","newObjValue","isInteger","isBoolean","isNumber","newObjValuePath","set","length","splice","removeDuplicateTypes","str","schemaStr","values","split","filter","i","reduce","accum","fragment","idx","full","trim","fragmentArr","map","s","name","shift","amtFields","indexOf","combineTypes","sort","a0","a1","_ref","join","probablyDuplicates","fieldsSignature","extractPossibleIdenticalTypes","arr","stringifySchema","flow","schemaToString","typeName","firstElement","newTypeName","pascalCase","newObjString","JSON","stringify","replace","safeFnExecute","fn","error","jsonToSchema","_ref$baseType","baseType","_validateJson","jsonInput","_safeFnExecute","parse","jsonError","title","message","validateJson","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","schema","_jsonToSchema","Swal","fire","text","type","setState","_this2","width","window","innerWidth","_this$state","react_default","a","createElement","onClick","convert","bind","index_esm","defaultSize","react_codemirror2","onBeforeChange","editor","data","onChange","options","mode","lineNumbers","tabSize","href","target","className","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTA8EeA,EA7CE,SAAAC,GAKf,IAJA,IAAMC,EAAS,GACTC,EAAsB,GACtBC,EAAQ,CAAC,CAAEC,IAAKJ,EAAOK,KAAM,KAHXC,EAAA,eAAAC,EAMAJ,EAAMK,MAApBJ,EANcG,EAMdH,IAAKC,EANSE,EAMTF,KAEbI,OAAOC,KAAKN,GAAKO,QAAQ,SAAAC,GACvB,IAAIC,EAAeT,EAAIQ,GAEvB,GAAKE,IAAEC,QAAQF,IAAkBC,IAAEE,SAASH,GAA5C,CAxBqB,IAAMI,EAgC3B,IAAIH,IAAEI,KAAKhB,EAAqB,SAAAiB,GAAC,OAAIA,IAAMN,IAA3C,CAIAX,EAAoBkB,KAAKP,GAEzB,IAAMQ,EAAahB,EAAI,GAAAiB,OAAMjB,EAAN,KAAgB,GACjCkB,EAAO,GAAAD,OAAMD,GAANC,OAAmBV,GAI5BE,IAAEC,QAAQF,KACZA,EAAe,CAACA,EAAa,KAG/BV,EAAMiB,KAAK,CACThB,IAAKS,EACLR,KAAMkB,SAzBR,CACE,IAAMC,GAzBmBP,EAyBmBJ,EAxB9CC,IAAEW,UAAUR,GACP,MAELH,IAAEY,UAAUT,GACP,UAELH,IAAEa,SAASV,GACN,QAEF,UAgBKW,EAAkBvB,EAAI,GAAAiB,OAAMjB,EAAN,KAAgB,GAC5CS,IAAEe,IAAI5B,EAAN,GAAAqB,OAAiBM,GAAjBN,OAAmCV,GAAOY,OATzCrB,EAAM2B,OAAS,GAAGxB,IAqCzB,OADAJ,EAAoB6B,OAAO,EAAG7B,EAAoB4B,QAC3C7B,mBCMM+B,EAhBc,SAAAC,GAC3B,IAAMC,EAAYzB,OAAO0B,OAhDN,SAAAF,GAAG,OACtBA,EACGG,MAAM,SAENC,OAAO,SAAAC,GAAC,OAAIA,IACZC,OAAO,SAACC,EAAOC,EAAUC,GACxB,IAAMC,EAAO,QAAArB,OAAQmB,GAAWG,OAE1BC,EAAcJ,EACjBG,OACAR,MAAM,KACNU,IAAI,SAAAC,GAAC,OAAIA,EAAEH,SACRI,EAAOH,EAAYI,QACnBC,EAAYL,EAAYR,OAAO,SAAAU,GAAC,OAAIA,EAAEI,QAAQ,MAAQ,IAAGrB,OAO/D,QAJKU,EAAMQ,IAASR,EAAMQ,GAAME,UAAYA,KAC1CV,EAAMQ,GAAQ,CAAEL,OAAMK,OAAME,YAAWR,QAGlCF,GACN,IA2B2BY,CAAanB,IAC1CoB,KAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGZ,IAAMa,EAAGb,MAC7BI,IAAI,SAAAU,GAAA,OAAAA,EAAGb,OACPc,KAAK,QAEFC,EAAqBjD,OAAO0B,OA9BE,SAAAF,GAAG,OACvCA,EACGG,MAAM,SAENC,OAAO,SAAAC,GAAC,OAAIA,IACZC,OAAO,SAACC,EAAOC,GACd,IAAMI,EAAcJ,EACjBG,OACAR,MAAM,KACNU,IAAI,SAAAC,GAAC,OAAIA,EAAEH,SACRI,EAAOH,EAAYI,QACnBU,EAAkBd,EAAYY,KAAK,KAEzC,OAAKjB,EAAMmB,KAKmC,IAA1CnB,EAAMmB,GAAiBR,QAAQH,IACjCR,EAAMmB,GAAiBvC,KAAK4B,GAEvBR,IAPLA,EAAMmB,GAAmB,CAACX,GACnBR,IAOR,IAQoCoB,CAA8B1B,IACpEG,OAAO,SAAAwB,GAAG,OAAIA,EAAI/B,OAAS,IAC3BgB,IAAI,SAAAe,GAAG,WAAAvC,OAASuC,EAAIJ,KAAK,QACzBA,KAAK,MAER,SAAAnC,OAAUY,GAAVZ,OACEoC,EAAkB,uCAAApC,OAA0CoC,GAAuB,KCTxEI,EAFShD,IAAEiD,KAAK,CA3CR,SAAjBC,EAAkBC,EAAU7D,GAChC,IAAI6B,EAAM,GAEVxB,OAAOC,KAAKN,GAAKO,QAAQ,SAAAC,GACvB,GAAIE,IAAEC,QAAQX,EAAIQ,IAAlB,CACE,IAAMsD,EAAe9D,EAAIQ,GAAK,GAE9B,GAAIE,IAAEC,QAAQmD,IAAiBpD,IAAEE,SAASkD,GAAe,CACvD,IAAMC,EAAcC,IAAWxD,GAC/BqB,GAAO+B,EAAeG,EAAaD,GACnC9D,EAAIQ,GAAK,GAAKuD,QAKlB,GAAIrD,IAAEE,SAASZ,EAAIQ,IAAO,CACxB,IAAMuD,EAAcC,IAAWxD,GAC/BqB,GAAO+B,EAAeG,EAAa/D,EAAIQ,IACvCR,EAAIQ,GAAOuD,KAef,IAAME,EAAeC,KAAKC,UAAUnE,EAAK,KAAM,GAE/C,MAAO,GAAAkB,OAAGW,EAAH,SAAAX,OAAc2C,EAAd,KAAA3C,OAA0B+C,EAAaG,QAAQ,KAAM,IAArD,KACJA,QAAQ,QAAS,KACjBA,QAAQ,SAAU,KAClBA,QAAQ,WAAY,KACpBA,QAAQ,KAAM,IACdA,QAAQ,SAAU,OAGyBxC,IC7C1CyC,EAAgB,SAAAC,GACpB,IACE,MAAO,CAAEzD,MAAOyD,KAChB,MAAOC,GACP,MAAO,CAAEA,WA4BPC,EAAe,SAAApB,GAAuD,IAAAqB,EAAArB,EAApDsB,gBAAoD,IAAAD,EAAzC,wBAAyCA,EAAAE,EAxBvD,SAAAC,GAAa,IAAAC,EACIR,EAAc,kBAAMH,KAAKY,MAAMF,KAApDG,EADiBF,EACxBN,MAAkB1D,EADMgE,EACNhE,MAE1B,OAAIkE,EACK,CACLR,MAAO,CACLS,MAAO,wBACPC,QAASF,EAAUE,UAKpBpE,EASE,CAAEA,SARA,CACL0D,MAAO,CACLS,MAAO,wBACPC,QAAS,OASUC,CADiD9B,EAAhBwB,WAClDL,EADkEI,EAClEJ,MAAO1D,EAD2D8D,EAC3D9D,MACf,OAAI0D,EACK,CAAEA,SAGJF,EAAc,kBAAMX,EAAgBgB,EAAU/E,EAASkB,OC2DjDsE,2BAzGb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAhF,OAAAiF,EAAA,EAAAjF,CAAAkF,KAAAJ,IACjBE,EAAAhF,OAAAmF,EAAA,EAAAnF,CAAAkF,KAAAlF,OAAAoF,EAAA,EAAApF,CAAA8E,GAAAO,KAAAH,KAAMH,KAEDO,MAAQ,CACXf,UAAS,iKAgBTgB,OAAM,yIApBSP,yEAkCT,IACAT,EAAcW,KAAKI,MAAnBf,UADAiB,EAGiBrB,EAAa,CAAEI,cAAhCL,EAHAsB,EAGAtB,MAAO1D,EAHPgF,EAGOhF,MACf,GAAI0D,EAAJ,CAAW,IACDS,EAAmBT,EAAnBS,MAAOC,EAAYV,EAAZU,QAEfa,IAAKC,KAAK,CACRf,QACAgB,KAAMf,EACNgB,KAAM,eAMVV,KAAKW,SAAS,CAAEN,OAAQ/E,qCAGjB,IAAAsF,EAAAZ,KACDa,EAAQC,OAAOC,WAAa,EAD3BC,EAEuBhB,KAAKI,MAA3Bf,EAFD2B,EAEC3B,UAAWgB,EAFZW,EAEYX,OAEnB,OACEY,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,mDACAF,EAAAC,EAAAC,cAAA,UAAQC,QAASpB,KAAKqB,QAAQC,KAAKtB,OAAnC,YAIFiB,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAW9E,MAAM,WAAW+E,YAAaX,GACvCI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBAEAF,EAAAC,EAAAC,cAACM,EAAA,WAAD,CACEC,eAAgB,SAACC,EAAQC,EAAMtG,GAC7BsF,EAAKD,SAAS,CAAEtB,UAAW/D,KAE7BuG,SAAU,SAACF,EAAQC,EAAMtG,KAEzBA,MAAO+D,EACPyC,QAAS,CAAEC,KAAM,OAAQC,aAAa,EAAMC,QAAS,MAGzDhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACM,EAAA,WAAD,CACEC,eAAgB,SAACC,EAAQC,EAAMtG,GAC7BsF,EAAKD,SAAS,CAAEN,OAAQ/E,KAE1BuG,SAAU,SAACF,EAAQC,EAAMtG,KAEzBA,MAAO+E,EACPyB,QAAS,CAAEE,aAAa,EAAMC,QAAS,OAK7ChB,EAAAC,EAAAC,cAAA,KACEe,KAAK,8DACLC,OAAO,SACPC,UAAU,eAHZ,uBA9FUC,cCAEC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.45ec3a28.chunk.js","sourcesContent":["/**\n * Copyright (c) [2018]-present, Walmart Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\"\n */\n\n\"use strict\";\n\nimport _ from \"lodash\";\n\nconst transformPrimitive = (key, value) => {\n  if (_.isInteger(value)) {\n    return \"Int\";\n  }\n  if (_.isBoolean(value)) {\n    return \"Boolean\";\n  }\n  if (_.isNumber(value)) {\n    return \"Float\";\n  }\n  return \"String\";\n};\n\nconst toSchema = input => {\n  const result = {};\n  const processedItemsCache = [];\n  const stack = [{ obj: input, path: \"\" }];\n\n  while (stack.length > 0) {\n    const { obj, path } = stack.pop();\n\n    Object.keys(obj).forEach(key => {\n      let currentValue = obj[key];\n\n      if (!_.isArray(currentValue) && !_.isObject(currentValue)) {\n        const newObjValue = transformPrimitive(key, currentValue);\n        const newObjValuePath = path ? `${path}.` : \"\";\n        _.set(result, `${newObjValuePath}${key}`, newObjValue);\n        return;\n      }\n\n      // all this to guard against circular refs\n      if (_.some(processedItemsCache, o => o === currentValue)) {\n        return;\n      }\n\n      processedItemsCache.push(currentValue);\n\n      const pathPrefix = path ? `${path}.` : \"\";\n      const newPath = `${pathPrefix}${key}`;\n\n      // only use the first element in the array since we're assuming the same type for all\n      // array elements\n      if (_.isArray(currentValue)) {\n        currentValue = [currentValue[0]];\n      }\n\n      stack.push({\n        obj: currentValue,\n        path: newPath\n      });\n    });\n  }\n\n  processedItemsCache.splice(0, processedItemsCache.length);\n  return result;\n};\n\nexport default toSchema;\n","/**\n * Copyright (c) [2018]-present, Walmart Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\"\n */\n\n\"use strict\";\n\nconst combineTypes = str =>\n  str\n    .split(\"type \")\n    // clear empty lines\n    .filter(i => i)\n    .reduce((accum, fragment, idx) => {\n      const full = `type ${fragment}`.trim();\n\n      const fragmentArr = fragment\n        .trim()\n        .split(\" \")\n        .map(s => s.trim());\n      const name = fragmentArr.shift();\n      const amtFields = fragmentArr.filter(s => s.indexOf(\":\") > -1).length;\n\n      // keep the type with the most fields\n      if (!accum[name] || accum[name].amtFields < amtFields) {\n        accum[name] = { full, name, amtFields, idx };\n      }\n\n      return accum;\n    }, {});\n\nconst extractPossibleIdenticalTypes = str =>\n  str\n    .split(\"type \")\n    // clear empty lines\n    .filter(i => i)\n    .reduce((accum, fragment) => {\n      const fragmentArr = fragment\n        .trim()\n        .split(\" \")\n        .map(s => s.trim());\n      const name = fragmentArr.shift();\n      const fieldsSignature = fragmentArr.join(\" \");\n\n      if (!accum[fieldsSignature]) {\n        accum[fieldsSignature] = [name];\n        return accum;\n      }\n\n      if (accum[fieldsSignature].indexOf(name) === -1) {\n        accum[fieldsSignature].push(name);\n      }\n      return accum;\n    }, {});\n\nconst removeDuplicateTypes = str => {\n  const schemaStr = Object.values(combineTypes(str))\n    .sort((a0, a1) => a0.idx - a1.idx)\n    .map(({ full }) => full)\n    .join(\"\\n\\n\");\n\n  const probablyDuplicates = Object.values(extractPossibleIdenticalTypes(schemaStr))\n    .filter(arr => arr.length > 1)\n    .map(arr => `# ${arr.join(\" \")}`)\n    .join(\"\\n\");\n\n  return `${schemaStr}${\n    probablyDuplicates ? `\\n\\n# Types with identical fields:\\n${probablyDuplicates}` : \"\"\n  }`;\n};\n\nexport default removeDuplicateTypes;\n","/**\n * Copyright (c) [2018]-present, Walmart Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\"\n */\n\n\"use strict\";\n\n// import util from \"util\";\nimport _ from \"lodash\";\nimport pascalCase from \"pascal-case\";\nimport removeDuplicateTypes from \"./remove-duplicate-types\";\n\nconst schemaToString = (typeName, obj) => {\n  let str = \"\";\n\n  Object.keys(obj).forEach(key => {\n    if (_.isArray(obj[key])) {\n      const firstElement = obj[key][0];\n\n      if (_.isArray(firstElement) || _.isObject(firstElement)) {\n        const newTypeName = pascalCase(key);\n        str += schemaToString(newTypeName, firstElement);\n        obj[key][0] = newTypeName;\n      }\n      return;\n    }\n\n    if (_.isObject(obj[key])) {\n      const newTypeName = pascalCase(key);\n      str += schemaToString(newTypeName, obj[key]);\n      obj[key] = newTypeName;\n    }\n  });\n\n  //original implementation to node\n  // const newObjString = util.inspect(obj, { depth: null, compact: false });\n\n  // return `${str}type ${typeName} ${newObjString.replace(/'/g, \"\")} `\n  //   .replace(/\\[\\n/g, \"[\")\n  //   .replace(/\\[\\s+/g, \"[\")\n  //   .replace(/\\n\\s+\\]/g, \"]\")\n  //   .replace(/,/g, \"\")\n  //   .replace(/ {3,}/g, \"  \");\n\n  //adaptation to web\n  const newObjString = JSON.stringify(obj, null, 4);\n\n  return `${str}type ${typeName} ${newObjString.replace(/\"/g, \"\")} `\n    .replace(/\\[\\n/g, \"[\")\n    .replace(/\\[\\s+/g, \"[\")\n    .replace(/\\n\\s+\\]/g, \"]\")\n    .replace(/,/g, \"\")\n    .replace(/ {3,}/g, \"  \");\n};\n\nconst stringifySchema = _.flow([schemaToString, removeDuplicateTypes]);\n\nexport default stringifySchema;\n\n","/**\n * Copyright (c) [2018]-present, Walmart Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\"\n */\n\n\"use strict\";\n\nimport toSchema from \"./to-schema\";\nimport stringifySchema from \"./stringify-schema\";\n\nconst safeFnExecute = fn => {\n  try {\n    return { value: fn() };\n  } catch (error) {\n    return { error };\n  }\n};\n\nconst validateJson = jsonInput => {\n  const { error: jsonError, value } = safeFnExecute(() => JSON.parse(jsonInput));\n\n  if (jsonError) {\n    return {\n      error: {\n        title: 'Invalid JSON received',\n        message: jsonError.message \n      }\n    };\n  }\n\n  if (!value) {\n    return {\n      error: {\n        title: 'Invalid JSON received',\n        message: null\n      }\n    };\n  }\n\n  return { value };\n};\n\nconst jsonToSchema = ({ baseType = \"AutogeneratedMainType\", jsonInput }) => {\n  const { error, value } = validateJson(jsonInput);\n  if (error) {\n    return { error };\n  }\n\n  return safeFnExecute(() => stringifySchema(baseType, toSchema(value)));\n};\n\nexport {\n  jsonToSchema,\n  validateJson\n};\n","import React, { Component } from 'react';\nimport Swal from 'sweetalert2'\nimport SplitPane from 'react-split-pane';\nimport {Controlled as CodeMirror} from 'react-codemirror2';\n\nimport {\n  jsonToSchema\n} from './json-to-simple-graphql-schema';\n\nimport 'codemirror/lib/codemirror.css';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      jsonInput: \n`{\n  \"userId\": 1,\n  \"id\": 1,\n  \"addresses\": [\n    {\n      \"id\": 2,\n      \"name\": \"two\"\n    },\n    {\n      \"id\": 1,\n      \"name\": \"one\"\n    }\n  ]\n}`\n,\n      schema: \n`type Addresses {\n  id: Int\n  name: String\n}\n\ntype AutogeneratedMainType {\n  userId: Int\n  id: Int\n  addresses: [Addresses]\n}`\n    }\n  }\n\n  convert() {\n    const { jsonInput } = this.state;\n\n    const { error, value } = jsonToSchema({ jsonInput });\n    if (error) {\n      const { title, message } = error;\n      \n      Swal.fire({\n        title,\n        text: message,\n        type: 'error'\n      })\n\n      return;\n    }\n    \n    this.setState({ schema: value });\n  }\n\n  render() {\n    const width = window.innerWidth / 2;\n    const { jsonInput, schema } = this.state;\n\n    return (\n      <div>\n        <header>\n          <h1>Convert JSON to GraphQL Schema Online</h1>\n          <button onClick={this.convert.bind(this)}>Convert</button>\n        </header>\n        \n\n        <SplitPane split=\"vertical\" defaultSize={width}>\n          <div>\n            <h2>JSON Input</h2>\n\n            <CodeMirror \n              onBeforeChange={(editor, data, value) => {\n                this.setState({ jsonInput: value});\n              }}\n              onChange={(editor, data, value) => {\n              }}\n              value={jsonInput}\n              options={{ mode: 'json', lineNumbers: true, tabSize: 2 }}\n            />\n          </div>\n          <div>\n            <h2>GraphQL schema</h2>\n            <CodeMirror\n              onBeforeChange={(editor, data, value) => {\n                this.setState({ schema: value});\n              }}\n              onChange={(editor, data, value) => {\n              }}\n              value={schema}\n              options={{ lineNumbers: true, tabSize: 2 }}\n            />\n          </div>\n        </SplitPane>\n\n        <a \n          href=\"https://github.com/MatheusR42/json-to-graphql-schema-online\"\n          target=\"_blank\"\n          className=\"source-code\"\n        >\n          Source code  \n        </a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}